{"version":3,"sources":["components/Common/FormsControls/FormsControls.module.css","components/Common/FormsControls/FormsControls.jsx","untils/validators.js","components/Login/Login.jsx"],"names":["module","exports","Textarea","input","meta","touched","error","props","hasError","className","style","formControl","Input","required","value","maxLengthCreator","maxLength","length","maxLength30","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","component","validate","name","placeholder","type","form_summery_error","connect","state","isAuth","auth","login","logout","to","formData","email","password","rememberMe"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,mBAAqB,4C,oJCEhHC,EAAW,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,MAA8C,IAAvCC,KAAOC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,MAAWC,EAAY,gCAEjEC,EAAWH,GAAWC,EAE5B,OAAO,yBAAKG,UAAS,UAAKC,IAAMC,YAAX,YAA0BH,EAAWE,IAAMJ,MAAQ,KACtE,8CAAeC,EAAWJ,IADrB,IAC+B,6BACnCK,GAAY,kCAAUF,KAIdM,EAAQ,SAAC,GAAiD,IAA/CT,EAA8C,EAA9CA,MAA8C,IAAvCC,KAAOC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,MAAWC,EAAY,gCAE9DC,EAAWH,GAAWC,EAE5B,OAAO,yBAAKG,UAAS,UAAKC,IAAMC,YAAX,YAA0BH,EAAWE,IAAMJ,MAAQ,KACtE,2CAAYC,EAAWJ,IADlB,IAC4B,6BAChCK,GAAY,kCAAUF,M,iCCnB3B,oEAAO,IAAMO,EAAW,SAAAC,GACtB,IAAIA,EACJ,MAAO,sBAGIC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC9C,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCNzC,yGASME,EAAcH,YAAiB,IAcjCI,EAAiBC,YAAU,CAC7BC,KAAM,SADaD,EAZH,SAAC,GAA6B,IAA3BE,EAA0B,EAA1BA,aAAchB,EAAY,EAAZA,MACjC,OAAO,0BAAMiB,SAAUD,GACrB,6BAAK,kBAAC,IAAD,CAAOE,UAAWZ,IAAOa,SAAU,CAACZ,IAAUK,GAAcQ,KAAM,QAASC,YAAa,QAASC,KAAM,UAC5G,6BAAK,kBAAC,IAAD,CAAOJ,UAAWZ,IAAOa,SAAU,CAACZ,KAAWa,KAAM,WAAYC,YAAa,WAAYC,KAAM,cACrG,6BAAK,kBAAC,IAAD,CAAOJ,UAAWZ,IAAOc,KAAM,aAAcE,KAAM,aAAxD,eACCtB,GAAU,yBAAKG,UAAWC,IAAMmB,oBAC9BvB,GAEH,6BAAK,6CA2BMwB,uBAJF,SAACC,GAAD,MAAY,CACvBC,OAAQD,EAAME,KAAKD,UAGQ,CAAEE,UAAOC,YAAvBL,EAnBD,SAACvB,GAMb,OAAIA,EAAMyB,OACD,kBAAC,IAAD,CAAUI,GAAI,aAEhB,6BACL,qCACA,kBAACjB,EAAD,CAAgBI,SATD,SAACc,GAChB9B,EAAM2B,MAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/7.071696c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__35sHi\",\"error\":\"FormsControls_error__3dHb_\",\"form_summery_error\":\"FormsControls_form_summery_error__1hCjM\"};","import React from 'react';\r\nimport style from './FormsControls.module.css';\r\n\r\nexport const Textarea = ({ input, meta: {touched, error}, ...props }) => {\r\n\r\n  const hasError = touched && error;\r\n\r\n  return <div className={`${style.formControl} ${hasError ? style.error : ''}`}>\r\n    <textarea  {...props} {...input} /> <br />\r\n    {hasError && < span > {error}</span>}\r\n  </div >\r\n}\r\n\r\nexport const Input = ({ input, meta: {touched, error}, ...props }) => {\r\n\r\n  const hasError = touched && error;\r\n\r\n  return <div className={`${style.formControl} ${hasError ? style.error : ''}`}>\r\n    <input  {...props} {...input} /> <br />\r\n    {hasError && < span > {error}</span>}\r\n  </div >\r\n}","export const required = value => {\r\n  if (value) return undefined;\r\n  return 'Field is required!';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n  return undefined;\r\n}","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { Input } from '../Common/FormsControls/FormsControls';\r\nimport { required, maxLengthCreator } from '../../untils/validators';\r\nimport { connect } from 'react-redux';\r\nimport { login, logout } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport style from '../Common/FormsControls/FormsControls.module.css';\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst LoginForm = ({ handleSubmit, error }) => {\r\n  return <form onSubmit={handleSubmit}>\r\n    <div><Field component={Input} validate={[required, maxLength30]} name={\"email\"} placeholder={\"Email\"} type={\"text\"} /></div>\r\n    <div><Field component={Input} validate={[required]} name={\"password\"} placeholder={\"Password\"} type={\"password\"} /></div>\r\n    <div><Field component={Input} name={\"rememberMe\"} type={\"checkbox\"} />Remember me</div>\r\n    {error && (<div className={style.form_summery_error}>\r\n      {error}\r\n    </div>)}\r\n    <div><button>Send</button></div>\r\n  </form >\r\n};\r\n\r\nlet LoginReduxForm = reduxForm({\r\n  form: 'login'\r\n})(LoginForm);\r\n\r\nconst Login = (props) => {\r\n\r\n  const onSubmit = (formData) => {\r\n    props.login(formData.email, formData.password, formData.rememberMe);\r\n  }\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to={\"/profile\"} />\r\n  }\r\n  return <div>\r\n    <h1>Login</h1>\r\n    <LoginReduxForm onSubmit={onSubmit} />\r\n  </div>\r\n}\r\n\r\nconst MSTP = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default connect(MSTP, { login, logout })(Login);"],"sourceRoot":""}